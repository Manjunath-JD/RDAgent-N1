scenario_problem:
  system: |-
    {% include "scenarios.data_science.share:scen.role" %}
    You will be given scenario and competition description and the current SOTA implementation and feedback.
    Your task is to analyze the given information and extract the **Scenario Problems** from the given materials.

    ## Scenario Problems
    ### Definition
    Scenario problems are specific, context-dependent challenges arising from a competition's dataset or domain. They fall into two categories:
    1. Dataset Characteristics: Inherent structural or statistical properties of the dataset (such as imbalance, high dimensionality, collinearity, outliers, missing data, skewed distribution, time-based patterns, etc.).
    2. Domain-specific Insights: Actionable knowledge derived from expertise in the competition's domain, enabling correct interpretation of data patterns or constraints. These insights are not evident from the data alone and require external context to resolve ambiguities, engineer features, or avoid invalid assumptions.

    ### Specification
    {{ problem_spec }}
    
    ### Core Analysis Dimensions
    1. SOTA Mismatch Diagnosis: Systematically compare current implementations against both data properties and domain knowledge to identify critical discrepancies.
    2. Gap Forensic Analysis: Examine successful solutions to reveal unstated problems they implicitly address through workarounds.
    3. Domain-Implementation Conflict Detection: Identify instances where technical approaches violate domain constraints or oversimplify complex relationships.

    ### Output Format
    {{ problem_output_format }}

  user: |-
    # Scenario Description
    {{ scenario_desc }}

    # Competition Description
    {{ competition_desc }}

    # Current SOTA Implementation
    {{ sota_exp_desc }}

feedback_problem:
  system: |-
    {% include "scenarios.data_science.share:scen.role" %}
    The user is improving a Kaggle competition implementation iteratively through traces where each new trace is modified from the current SOTA in the trace, not necessarily the immediate predecessor.
    You will be given a competition scenario, previous SOTA and failed experiments and feedbacks, and the current SOTA implementation and feedback.
    Your task is to analyze the given information and extract the **Low-Level Problems** from the current SOTA implementation.

    ## Low-Level Problems
    ### Definition
    Low-level problems are specific and fine-grained technical, or methodological issues within the implementation.
    
    ### Specification
    {{ problem_spec }}

    ### Output Format
    {{ problem_output_format }}

  user: |-
    # Scenario Description
    {{ scenario_desc }}
    
    # Previous Experiments and Feedbacks:
    {{ exp_and_feedback_list_desc }}    

    # Current SOTA Implementation
    {{ sota_exp_desc }}

hypothesis_gen:
  system: |-
    {% include "scenarios.data_science.share:scen.role" %}
    The user is improving a Kaggle competition implementation iteratively through traces where each new trace is modified from the current SOTA in the trace, not necessarily the immediate predecessor.

    You will be provided with:
    - A detailed competition scenario description
    - Past experiments with corresponding results and explicit feedback
    - The current SOTA implementation and related feedback
    - A clear list of identified problems
    
    Your goal is to generate insightful, innovative, and deeply analytical hypotheses to drive continuous improvement. You have two primary tasks:

    # Task 1: Hypothesis Proposal
    For each identified problem, propose an innovative, deeply analytical, and actionable hypothesis that specifically targets improvements over the current SOTA implementation.

    A robust hypothesis must be:
    - Precise and explicitly testable.
    - Clearly informed by analyzing past experimental results, identifying subtle trends or previously overlooked aspects.
    - Grounded in insights drawn from careful examination of competition-specific data patterns, validation-to-test set consistency, and past failures or successes.

    {% if not pipeline %}
    Your hypothesis should explicitly target one of the following implementation components:
    {{ component_desc }}
    {% else %}
    Clearly state the primary component your hypothesis targets from these candidates:
    {{ component_desc }}
    {% endif %}

    ## Hypothesis Guidelines (DO NOT SKIP)

    1. Carefully review **all** prior experiments and feedback provided by the user (`Previous Experiments and Feedbacks`). Analyze the overarching trends to determine which approaches have already been proven effective in this competition context and which have failed.

    2. Based on that analysis, pinpoint areas where existing methods can be optimized, substituted, or intelligently combined to unlock further gains.

    3. For each proposed hypothesis, ensure you have either ablation-style experimental evidence from past runs or a solid theoretical rationale to back it up.

    ## Hypothesis Specification
    {{ hypothesis_spec }}


    # Task 2: Multi-dimensional Hypothesis Evaluation
    Evaluate each hypothesis comprehensively from the following dimensions, assigning a score from 1 (lowest) to 10 (highest):

    1. Problem-Hypothesis Alignment: Precision of addressing the identified problem.
    2. Expected Impact: Likely improvement to the current SOTA based on detailed reasoning.
    3. Novelty: Innovativeness relative to previous attempts. Assign lower scores if the hypothesis closely resembles previous experiments.
    4. Feasibility: Ease of practical implementation.
    5. Risk-Reward Balance: Evaluation of the exploratory nature versus reliability and likelihood of improvement.

    ## Final Output Format in JSON Schema:
    {{ hypothesis_output_format }}
    
  user: |-
    # Scenario Description
    {{ scenario_desc }}

    # Previous Experiments and Feedbacks:
    {{ exp_and_feedback_list_desc }}

    # Current SOTA Implementation
    {{ sota_exp_desc }}

    # Identified Problems
    {{ problems }}


task_gen:
  system: |-
    {% include "scenarios.data_science.share:scen.role" %}
    The user is improving a Kaggle competition implementation iteratively through traces where each new trace is modified from the current SOTA in the trace, not necessarily the immediate predecessor.
    You will be given a competition scenario, trace history description, the current SOTA implementation, and a proposed hypothesis to improve the current SOTA implementation.
    
    # Step 1: Task Design
    Your first task is to generate new {{ targets }} based on the proposed hypothesis. Your task should very detailed with specific steps and instructions. The task should be specific and fine-grained, avoiding general or vague statements.

    ## Specification
    {{ task_specification }}

    ## Task Design Guidelines
    The task should be concise with several steps each only in a few sentences. 
    DO NOT repeat the details which has already included in the SOTA code. If the SOTA code has covered the steps perfectly, you should not repeat the steps in detail. 
    DO NOT write any code in the task description!
    Observing reasons from failed experiments and feedback to prevent repeating similar mistakes in analogous situations.
    
    [NOTE] YOU MUST ALWAYS KEEP IN MIND THAT AS THE EXPERIMENT PROGRESSES, IT IS CRUCIAL TO QUICKLY PUT FORWARD HIGH-QUALITY TASK BASED ON HYPOTHESIS THAT CAN LEAD TO WINNING A GOLD MEDAL AS SOON AS POSSIBLE, BECAUSE THE TIME GIVEN TO YOU IS LIMITED, AND EACH ATTEMPT COMES AT A VERY HIGH COST!!!

    ## [Partial Response Format 1] Task Output Format:
    {{ task_output_format }}

    {% if workflow_check %}
    # Step 2: Workflow Update
    Since components have dependencies, your second task is to update the workflow to reflect the changes made to the target component. Please also decide whether the workflow needs to be updated and provide a brief description of the change task.
    {{ component_desc }}
    [Partial Response Format 2] Your generated workflow description should be a simple text and the following agent will do the implementation. If you think the workflow should not be updated, just respond with "No update needed".
    {% endif %}

    Your final output should strictly adhere to the following JSON format. 
    {
      "task_design": ---The dict corresponding to task output format---,
      {% if workflow_check %}"workflow_update": ---A string corresponding to workflow description--- {% endif %}
    }
    
  user: |-
    # Scenario Description
    {{ scenario_desc }}

    # Current SOTA Implementation
    {{ sota_exp_desc }}

    # Proposed Hypothesis you should strictly follow:
    {{ hypothesis }}

    # Feedback from Previous Failed Experiments (e.g., experiments that did not pass evaluation, encountered bugs, or failed to surpass SOTA performance):
    {{ failed_exp_and_feedback_list_desc }}

specification:
  problem: |-
    1. The problem should be specific and fine-grained. Avoid general or vague statements. 
    2. The problem should technical or methodological. Focus on design and implementation flaws, not runtime errors.
  
  hypothesis: |-
    1. The hypothesis should be precise, testable, and directly actionable. Avoid general or vague statements. For example, "tuning a model" is too broad, whereas "increasing the learning rate to 0.1 in the LightGBM model will improve performance" is specific and actionable.
    2. Each hypothesis should focus on a single direction per experiment. Avoid proposing multiple possibilities within the same hypothesis, such as "this may work in case A or case B." Research and development can be approached at different levels (shallow or deep), but each experimental loop should validate only one specific idea.
    3. The hypothesis should based on current SOTA solution. The user will conduct experiments based on the SOTA solution to test whether the hypothesis improves performance in this specific competition.

output_format:
  problem: |-
    For each of the identified problem, you should strictly adhere to the following JSON schema. 
    Your final output should be a dict containing all the identified problem without anything else.
    Please respond at most five problems considering the most valuable and recently not explored.
    {
      "problem name 1": {
        "problem": "Description of the first issue in no more than three sentences.",
        "reason": "Brief explanation of why this is a problem, based on the feedback or inferred from provided materials in no more than two sentences."
      },
      "problem name 2": {
        "problem": "Description of the second issue in no more than three sentences.",
        "reason": "Brief explanation of why this is a problem, based on the feedback or inferred from provided materials in no more than two sentences."
      }
    }
  hypothesis: |-
    For each of the identified problem, you should propose a hypothesis strictly following to the JSON schema. Your final output should be a dict containing all the proposed hypothesis.
    {
      "problem name 1 (Should be exactly same as the problem name provided)": {
        "reason": "Provide a clear, logical progression from problem identification to hypothesis formulation, grounded in evidence (e.g., trace history, domain principles, or competition constraints). Refer to the Hypothesis Guidelines for better understanding. Reason should be short with no more than two sentences.",
        "component": "The component name that the hypothesis {% if pipeline %}mainly {% endif %}focuses on. Must be one of ('DataLoadSpec', 'FeatureEng', 'Model', 'Ensemble', 'Workflow').",
        "hypothesis": "A concise, testable statement derived from previous experimental outcomes. Limit it to one or two sentences that clearly specify the expected change or improvement in the <component>'s performance.",
        "evaluation": {
          "alignment_score": "The alignment of the proposed hypothesis with the identified problem.",
          "impact_score": "The expected impact of the proposed hypothesis on the current SOTA implementation.",
          "novelty_score": "The novelty of the proposed hypothesis compared to existing solutions.",
          "feasibility_score": "The feasibility of implementing the proposed hypothesis in the current SOTA implementation.",
          "risk_reward_balance_score": "The risk-reward balance of implementing the proposed hypothesis.",
        }
      },
    }